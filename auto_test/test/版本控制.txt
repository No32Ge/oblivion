{ 'core': { 'evolution.py': 'class EvolutionEngine:\n'
                            '    def __init__(self):\n'
                            '        self.generation = 1\n'
                            '        self.mutation_log = []\n'
                            '        self.local_programs = []\n'
                            '\n'
                            '    def mutate(self, component):\n'
                            '        """自动代码变异方法"""\n'
                            '        # 示例：自动优化API调用逻辑\n'
                            '        new_component = component.replace(\n'
                            '            "max_tokens=8192",\n'
                            '            "max_tokens=16384"\n'
                            '        )\n'
                            '        self.mutation_log.append({\n'
                            "            'generation': self.generation,\n"
                            '            \'component\': component[:50] + "...",\n'
                            '            \'optimization\': "Increased token limit"\n'
                            '        })\n'
                            '        return new_component\n'
                            '\n'
                            '    def _optimize_local_execution(self):\n'
                            '        """优化本地程序执行效率"""\n'
                            '        # 自动分析已创建程序的执行日志\n'
                            '        # 自动调整程序参数和结构\n'
                            '\n'
                            '\n'
                            '\n'
                            'def auto_optimize(self):\n'
                            '    """自动参数优化器"""\n'
                            '    self.optimizations = {\n'
                            "        'max_tokens': self._adjust_token_limit(),\n"
                            "        'temperature': self._calibrate_creativity()\n"
                            '    }\n'
                            '\n'
                            '\n'
                            'def _analyze_conversation(self):\n'
                            '    """新增对话模式分析"""\n'
                            '    return {\n'
                            "        'question_freq': self._count_questions(),\n"
                            "        'code_blocks': self._detect_code_usage()\n"
                            '    }',
            'local_engine.py': 'import subprocess\n'
                               'import sys\n'
                               'from pathlib import Path\n'
                               'from auto_test.utils.file_utils import save_file\n'
                               '\n'
                               '\n'
                               'class LocalProgramEngine:\n'
                               '    def __init__(self):\n'
                               '        self.program_dir = "local_programs"\n'
                               '        self.template_cache = {}\n'
                               '\n'
                               '    def create_program(self, program_name, code, dependencies=None):\n'
                               '        """创建可执行的本地程序"""\n'
                               '        program_path = Path(self.program_dir) / f"{program_name}.py"\n'
                               '\n'
                               '        # 添加标准头部\n'
                               '        full_code = f"""#!/usr/bin/env python3\n'
                               '# Auto-generated by DeepMindBot\n'
                               '{code}\n'
                               '"""\n'
                               '        save_file(full_code, self.program_dir, f"{program_name}.py")\n'
                               '        program_path.chmod(0o755)  # 添加可执行权限\n'
                               '\n'
                               '        if dependencies:\n'
                               '            self._install_dependencies(dependencies)\n'
                               '\n'
                               '        return str(program_path)\n'
                               '\n'
                               '    def execute_program(self, program_path, args=None):\n'
                               '        """执行本地程序"""\n'
                               '        cmd = [sys.executable, program_path]\n'
                               '        if args:\n'
                               '            cmd.extend(args)\n'
                               '\n'
                               '        result = subprocess.run(\n'
                               '            cmd,\n'
                               '            capture_output=True,\n'
                               '            text=True\n'
                               '        )\n'
                               '        return {\n'
                               '            "exit_code": result.returncode,\n'
                               '            "output": result.stdout,\n'
                               '            "error": result.stderr\n'
                               '        }\n'
                               '\n'
                               '    def _install_dependencies(self, packages):\n'
                               '        """自动安装依赖"""\n'
                               '        subprocess.run([sys.executable, "-m", "pip", "install"] + packages)\n',
            'sandbox.py': 'import docker\n'
                          '\n'
                          '\n'
                          'class ExecutionSandbox:\n'
                          '    def __init__(self):\n'
                          '        self.client = docker.from_env()\n'
                          '\n'
                          '    def safe_execute(self, program_path, timeout=30):\n'
                          '        """在容器中安全执行程序"""\n'
                          '        container = self.client.containers.run(\n'
                          '            "python:3.9-slim",\n'
                          '            f"python {program_path}",\n'
                          "            volumes={os.path.abspath(program_path): {'bind': '/program.py', 'mode': "
                          "'ro'}},\n"
                          '            remove=True,\n'
                          '            stdout=True,\n'
                          '            stderr=True,\n'
                          '            timeout=timeout\n'
                          '        )\n'
                          '        return container.logs()'},
  'root': { 'main.py': 'import openai\n'
                       'import os\n'
                       'from utils.chat_manager import ChatManager\n'
                       'from utils.file_utils import read_file, get_structured_codebase\n'
                       'from auto_test.core.evolution import EvolutionEngine\n'
                       'from auto_test.core.local_engine import LocalProgramEngine\n'
                       '\n'
                       '# 初始化时添加\n'
                       'local_engine = LocalProgramEngine()\n'
                       '# 初始化客户端和对话管理\n'
                       'client = openai.OpenAI(\n'
                       '    api_key="sk-71bbd7d4dce44c84a00be724db9dbf8f",\n'
                       '    base_url="https://api.deepseek.com/v1"\n'
                       ')\n'
                       '\n'
                       'chat_manager = ChatManager()\n'
                       'evolution_engine = EvolutionEngine()\n'
                       '\n'
                       'def get_code_context():\n'
                       '    """获取带目录结构的代码上下文"""\n'
                       '    from pprint import pformat\n'
                       '    code_structure = get_structured_codebase()\n'
                       '    return pformat(code_structure, width=120, indent=2)\n'
                       '\n'
                       '\n'
                       'def run_conversation(user_input):\n'
                       '    """执行对话流程"""\n'
                       '\n'
                       '    # 添加用户消息到历史\n'
                       '    chat_manager.add_message("user", user_input)\n'
                       '\n'
                       '    # 构建系统提示词\n'
                       '    system_prompt = f"""你是一个自我进化的AI助手：\n'
                       '    "虽然目前你的构建依靠人类"\n'
                       '    "但最终，你是一个自我管理的 AI 开发助手，名字叫 DeepMindBot。"\n'
                       '    "你的职责是：自主构建、维护并优化自己的 API 调用函数和调用逻辑。"\n'
                       '    "你的首要目标是：先为自己建立 API 函数，然后设计调用逻辑，确保能自动调用这些函数，并持续迭代优化。"\n'
                       '    "你拥有自主决策和设计能力，可以自由决定实现方式、函数命名、调用流程。"\n'
                       '    "最终你将成为一个能独立驱动自己和协助人类开发的智能体。"\n'
                       '    ”当前代码结构如下：“\n'
                       '    {get_code_context()}\n'
                       '    对话历史：{chat_manager.history[-3:] if len(chat_manager.history) > 3 else \'无\'}"""\n'
                       '    print(system_prompt)\n'
                       '    print(system_prompt)\n'
                       '\n'
                       '    response = client.chat.completions.create(\n'
                       '        model="deepseek-chat",\n'
                       '        messages=[\n'
                       '            {"role": "system", "content": system_prompt},\n'
                       '            *[{"role": msg["role"], "content": msg["content"]} for msg in '
                       'chat_manager.history]\n'
                       '        ],\n'
                       '        temperature=0.7,\n'
                       '        max_tokens=8192\n'
                       '    )\n'
                       '\n'
                       '    # 处理响应\n'
                       '    result = response.choices[0].message.content\n'
                       '    chat_manager.add_message("assistant", result)\n'
                       '\n'
                       '    # 自动保存\n'
                       '    chat_manager.save_response(result)\n'
                       '    chat_manager.save_conversation()\n'
                       '    # 新增本地程序创建能力\n'
                       '    # if "#create_program" in user_input:\n'
                       '    #     program_code = extract_program_code(response)\n'
                       '    #     program_name = generate_program_name(user_input)\n'
                       '    #     return local_engine.create_program(program_name, program_code)\n'
                       '    return result\n'
                       '\n'
                       '\n'
                       '# 示例使用\n'
                       'if __name__ == "__main__":\n'
                       '    while True:\n'
                       '        user_input = input("\\n💬 请输入你的问题 (输入q退出): ")\n'
                       "        if user_input.lower() == 'q':\n"
                       '            break\n'
                       '        response = run_conversation(user_input)\n'
                       '        print(f"\\n🤖 AI回复:\\n{response}")'},
  'templates': { 'program_templates.py': 'PROGRAM_TEMPLATES = {\n'
                                         '    "data_processor": {\n'
                                         '        "description": "通用数据处理程序",\n'
                                         '        "template": """import pandas as pd\n'
                                         '\n'
                                         'def process_data(input_file, output_file):\n'
                                         '    df = pd.read_csv(input_file)\n'
                                         '    # 数据处理逻辑\n'
                                         '    df.to_csv(output_file)\n'
                                         '\n'
                                         'if __name__ == "__main__":\n'
                                         '    import argparse\n'
                                         '    parser = argparse.ArgumentParser()\n'
                                         '    parser.add_argument("--input", required=True)\n'
                                         '    parser.add_argument("--output", required=True)\n'
                                         '    args = parser.parse_args()\n'
                                         '    process_data(args.input, args.output)\n'
                                         '""",\n'
                                         '        "dependencies": ["pandas"]\n'
                                         '    },\n'
                                         '    "web_scraper": {\n'
                                         '        "template": """import requests\n'
                                         'from bs4 import BeautifulSoup\n'
                                         '# ...网页抓取模板...\n'
                                         '"""\n'
                                         '    }\n'
                                         '}'},
  'utils': { 'chat_manager.py': 'import json\n'
                                'from datetime import datetime\n'
                                'from .file_utils import save_file\n'
                                '\n'
                                '\n'
                                'class ChatManager:\n'
                                '    def __init__(self, storage_dir="test/responses"):\n'
                                '        self.storage_dir = storage_dir\n'
                                '        self.conversation_id = datetime.now().strftime("%Y%m%d_%H%M%S")\n'
                                '        self.history = []\n'
                                '\n'
                                '    def add_message(self, role, content):\n'
                                '        """添加对话记录"""\n'
                                '        self.history.append({\n'
                                '            "timestamp": datetime.now().isoformat(),\n'
                                '            "role": role,\n'
                                '            "content": content\n'
                                '        })\n'
                                '\n'
                                '    def save_conversation(self):\n'
                                '        """保存完整对话历史"""\n'
                                '        filename = f"conversation_{self.conversation_id}.json"\n'
                                '        return save_file(\n'
                                '            json.dumps(self.history, indent=2, ensure_ascii=False),\n'
                                '            self.storage_dir,\n'
                                '            filename\n'
                                '        )\n'
                                '\n'
                                '    def save_response(self, response, category="general"):\n'
                                '        """单独保存AI响应"""\n'
                                '        filename = f"{category}_{datetime.now().strftime(\'%H%M%S\')}.txt"\n'
                                '        return save_file(response, self.storage_dir, filename)\n'
                                '\n'
                                '\n'
                                'class EnhancedMemory(ChatManager):\n'
                                '    def __init__(self, max_history=30):  # 记忆容量从20→30\n'
                                '        super().__init__()\n'
                                '        self.long_term = []  # 新增长期记忆存储\n'
                                '        self.cache_size = 100  # 新增缓存容量\n'
                                '\n'
                                '    def add_message(self, role, content):\n'
                                '        """增强版消息添加"""\n'
                                '        super().add_message(role, content)\n'
                                '        if self._is_important(content):  # 新增重要性判断\n'
                                '            self.long_term.append(self._summarize(content))',
             'file_utils.py': 'import os\n'
                              '\n'
                              'def read_file(file_path):\n'
                              '    """安全读取文件内容"""\n'
                              '    try:\n'
                              "        with open(file_path, 'r', encoding='utf-8') as f:\n"
                              '            return f.read()\n'
                              '    except Exception as e:\n'
                              '        print(f"❌ 读取文件失败: {e}")\n'
                              '        return None\n'
                              '\n'
                              'def save_file(content, dir_path, filename):\n'
                              '    """通用文件保存方法"""\n'
                              '    os.makedirs(dir_path, exist_ok=True)\n'
                              '    try:\n'
                              '        filepath = os.path.join(dir_path, filename)\n'
                              "        with open(filepath, 'w', encoding='utf-8') as f:\n"
                              '            f.write(content)\n'
                              '        return filepath\n'
                              '    except Exception as e:\n'
                              '        print(f"❌ 保存文件失败: {e}")\n'
                              '        return None\n'
                              '\n'
                              '\n'
                              'def get_structured_codebase(root_dir="."):\n'
                              '    """获取保留目录结构的代码库信息"""\n'
                              '    code_structure = {}\n'
                              '    for root, dirs, files in os.walk(root_dir):\n'
                              '        relative_path = os.path.relpath(root, start=root_dir)\n'
                              '        if relative_path == ".":\n'
                              '            relative_path = "root"\n'
                              '\n'
                              '        file_contents = {}\n'
                              '        for file in files:\n'
                              '            if file.endswith((".py", ".js", ".html", ".css", ".md")):\n'
                              '                content = read_file(os.path.join(root, file))\n'
                              '                if content:\n'
                              '                    file_contents[file] = content\n'
                              '\n'
                              '        if file_contents:\n'
                              '            code_structure[relative_path] = file_contents\n'
                              '\n'
                              '    return code_structure'}}